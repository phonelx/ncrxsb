package monitor.approvalPending.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import monitor.approvalPending.dao.IApprovlDao;
import monitor.common.dao.BaseDAO;
import monitor.dispatched.bean.dto.DispatchedDto;


public class ApprovalDaoImpl extends BaseDAO implements IApprovlDao{
	
	@Override
	public int editApproval(String bz, String gmsfhm) {
		Connection conn = null;
		PreparedStatement ps = null;
		int result = 0;
		Calendar calendar = Calendar.getInstance();
        Date time = new Date();
        calendar.setTime(time);
        calendar.add(Calendar.DATE, 7);
        time = calendar.getTime();
        
        System.out.println("推迟后的一周："+time);
        
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date = df.format(time);
		System.out.println(date);
		try {
			conn = datasource.getConnection();
			String sql = "UPDATE T_BKRY SET BKZT=?,BZ=?,ISNEW=? ,SXSJ=TO_DATE(?,'yyyy-mm-dd hh24:mi:ss')WHERE GMSFHM=?";
			ps = conn.prepareStatement(sql);
			ps.setInt(1, 1);
			ps.setString(2, bz);
			ps.setInt(3, 1);
			ps.setString(4,date);
			ps.setString(5, gmsfhm);
			System.out.println(sql);
		    ps.executeUpdate();
		} catch (SQLException e) {
			result = 1;
			e.printStackTrace();
		}finally{
			close(conn, ps,null);
		}
		return result;
	}
	@Override
	public DispatchedDto listDispatchedInPage(DispatchedDto dispatchedDto,String param,int page,int rows) {
		DispatchedDto dto = new DispatchedDto();
		List<Map<String, Object>> ls = null;
		int total = 0;
		
		String beginIndex = String.valueOf((page -1)*rows +1);
		String lastIndex = String.valueOf(page*rows);
		
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT ID,GMSFHM,XM,RYLX,TO_CHAR(CJSJ,'yyyy-mm-dd ') AS CJSJ,TO_CHAR(SXSJ,'yyyy-mm-dd') AS SXSJ,");
		sql.append(" LRRSQU,HJDZ,BKZT,BKSY,BZ,SPRSQU,LRRNAME,SPRNAME,ISNEW FROM (SELECT ROWNUM RN ,T.*,T1.USERNAME AS LRRNAME,T2.USERNAME AS SPRNAME"); 
		sql.append(" FROM T_BKRY T,SSP_TUSERINFO T1,SSP_TUSERINFO T2 WHERE T.LRRSQU = T1.SQU AND T.SPRSQU = T2.SQU"+param+")");
		sql.append(" WHERE 1=1 " + param + " AND  RN>=" +beginIndex + " AND RN<" + lastIndex);
		sql.append(" ORDER BY CJSJ DESC");
		
		/*sql.append(" SELECT ID,GMSFHM,XM,RYLX,TO_CHAR(CJSJ,'yyyy-mm-dd') AS CJSJ,TO_CHAR(SXSJ,'yyyy-mm-dd') AS SXSJ,");
		sql.append(" LRRSQU,HJDZ,BKZT,BKSY,BZ,SPRSQU,LRRNAME,SPRNAME,ISNEW ,RN FROM ("); 
		sql.append(" select A.*,rownum rn from (SELECT T.*,T1.USERNAME AS LRRNAME,T2.USERNAME AS SPRNAME from   T_BKRY T,SSP_TUSERINFO T1,SSP_TUSERINFO T2");
		sql.append(" WHERE T.LRRSQU = T1.SQU AND T.SPRSQU = T2.SQU "+param+") A");
		sql.append(" where rownum < "+(startIndex+page.getPageSize()));
		sql.append(" ) a where rn > = "+startIndex);
		sql.append(" order by cjsj desc");*/
		try {
			ls = queryList(sql.toString(), datasource.getConnection());
			sql = new StringBuffer("SELECT COUNT(*) FROM T_BKRY T,SSP_TUSERINFO T1,SSP_TUSERINFO T2 WHERE 1=1 AND T.LRRSQU = T1.SQU AND T.SPRSQU = T2.SQU" + param + "");
			total = queryTotal(sql.toString(),datasource.getConnection());
			dto.getPageInfo().setRows(ls);
			dto.getPageInfo().setTotal(total);
			return dto;
		} catch (SQLException e) {
			return null;
		}
	}
	/**
	 * 执行查询，返回多条记录
	 * @param conn
	 * @param sql
	 * @return
	 */
	public List<Map<String, Object>> queryList(String sql,Connection con) {
		List<Map<String, Object>> ret = new ArrayList<Map<String, Object>>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rest = null;//结果集
		try {
			conn = con;//连接
			pstmt = conn.prepareStatement(sql);//创建
			rest = pstmt.executeQuery();//获取结果集
			ResultSetMetaData metaData = rest.getMetaData();
			while(rest.next()){
				LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>() ;
				for (int i = 1; i <= metaData.getColumnCount(); i++) {
					map.put(metaData.getColumnName(i), rest.getString(i) == null ? "" : rest.getString(i).trim());
					String txt = rest.getString(i);
					if (txt != null) {
						txt = txt.replace("<@>", "'");
					}
					map.put(metaData.getColumnName(i), txt);
				} 
				ret.add(map);
			}
			return ret;
		} catch (Exception ex) {
			return null;
		} finally {
			close(conn,pstmt,rest);
		}
	}
	
	/**
	 * 获取满足条件的总条数
	 * @param sql
	 * @return
	 */
	public int queryTotal(String sql, Connection con) {
		int totalCount=0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = con;//打开连接
			pstmt = conn.prepareStatement(sql);//创建执行
			rs = pstmt.executeQuery();
			ResultSetMetaData metaData=rs.getMetaData();
			while(rs.next()){
				for(int i=1;i<=metaData.getColumnCount();i++){
					totalCount=rs.getInt(i);
				} 
			}			
		} catch (Exception ex) {
		} finally {
			close(con,pstmt,rs);
		}
		return totalCount;
	}

	
	/**
	 * 关闭连接方法
	 * @param conn
	 * @param pstmt
	 * @param rs
	 */
	public static void close(Connection conn, PreparedStatement pstmt,ResultSet rs) {
		try {
			
			if (pstmt != null) {
				pstmt.close();
			}
			if (conn != null) {
				conn.close();
			}
			if (rs != null) {
				rs.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	/**
	*@ClassName 取消
	*@dataTime 2017-5-9-下午7:03:03
	*@version
	*@author:唐青
	*@since
	*/
	@Override
	public int quxiaoApproval(String bz, String gmsfhm) {
		
		Connection conn = null;
		PreparedStatement ps = null;
		int result = 0;
		
		try {
			conn = datasource.getConnection();
			String sql = "UPDATE T_BKRY SET BZ=? WHERE GMSFHM=?";
			ps = conn.prepareStatement(sql);
			ps.setInt(1, 1);
			ps.setString(2, gmsfhm);
			System.out.println(sql);
		    ps.executeUpdate();
		} catch (SQLException e) {
			result = 1;
			e.printStackTrace();
		}finally{
			close(conn, ps,null);
		}
		return result;
	}


}

