/***
	* copyright ：  xindongsheng Technologies Co., Ltd. Copyright 2010-9999,  All rights reserved 
	* Project Name:jgdl
	* @since：JDK1.6
	* @version：1.0
	* File Name:KzzjMxpzDaoImpl.java
	* Date:2017-10-26下午3:36:27   
	***/
package monitor.kzzjMxpz.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import monitor.common.dao.BaseDAO;
import monitor.common.exception.DaoException;
import monitor.kzzjMxpz.bean.entity.Dxinfo;
import monitor.kzzjMxpz.bean.entity.Dxmxb;
import monitor.kzzjMxpz.bean.vo.CpmxbDto;
import monitor.kzzjMxpz.bean.vo.DxzhMxbDto;
import monitor.kzzjMxpz.dao.IKzzjMxpzDao;
import monitor.user.bean.vo.PageInfoVo;

/**
 * @ClassName:KzzjMxpzDaoImpl
 * @dateTime: 2017-10-26 下午3:36:27
 * @Description: TODO
 * @version 
 * @author: 康正秋
 * @since JDK 1.6
 * History：
 * Editor     version      Time               Operation
 */
public class KzzjMxpzDaoImpl extends BaseDAO implements IKzzjMxpzDao {
	
	
	private void closeCon(Connection conn, PreparedStatement pstmt, ResultSet rs)
			throws SQLException {
		// 关闭连接
		if (rs != null) {
			rs.close();
		}
		if (pstmt != null) {
			pstmt.close();
		}
		if (conn != null) {
			conn.close();
		}
	}

	/** 
	 * TODO 查询支架目录(通过分页处理）
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#getPartsMenu(java.lang.String)
	 */
	@Override
	public PageInfoVo getPartsMenu(PageInfoVo page)throws SQLException {
		
		List<Dxinfo> list = new ArrayList<>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
	
		String sql = "SELECT COUNT(*) FROM PROJECT_DXINFO";
		conn = datasource.getConnection();
		pstmt = conn.prepareStatement(sql);
		rs = pstmt.executeQuery();

		if (rs.next()) {
			page.setTotal(rs.getInt(1));
		}
		
		int startIndex = (page.getPageNumber() - 1) * page.getPageSize() + 1;
		StringBuffer sbsql = new StringBuffer();
		
		int rn = startIndex + page.getPageSize();
		
		sbsql.append(" SELECT * FROM ( SELECT A.* ,ROWNUM RN FROM ( ");
		sbsql.append(" SELECT * FROM PROJECT_DXINFO  ORDER BY DXSQU)A) ");
		sbsql.append("WHERE RN<"+rn+" AND RN>="+startIndex);
		
		pstmt = conn.prepareStatement(sbsql.toString());
		rs = pstmt.executeQuery();
		
		Dxinfo dxinfo = null;
		
		while (rs.next()) {
			dxinfo = new Dxinfo();

			dxinfo.setDxSqu(rs.getString("DXSQU"));
			dxinfo.setDxmc(rs.getString("DXMC"));
			dxinfo.setGdlx(rs.getString("GDLX"));
			dxinfo.setAzfs(rs.getString("AZFS"));
			dxinfo.setZjxs(rs.getString("ZJXS"));
			dxinfo.setZp(rs.getString("ZP"));

			list.add(dxinfo);
		}	
		
		page.setRows(list);
		this.closeCon(conn, pstmt, rs);
		
		return page;	
	}

	/** 
	 * TODO 添加抗震支架部件明细
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#addKzzjMxpz()
	 */
	@Override
	public String addKzzjMxpz(Dxmxb dxmxb) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		//查看部件是否存在
		int count = 0;
		String searchSql = "select * from PROJECT_DXMXB t where t.DXSQU = ? AND t.BJSQU = ? AND t.BJLX = ?";
		try {
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(searchSql);
			pstmt.setString(1, dxmxb.getDXSQU());
			pstmt.setString(2, dxmxb.getBJSQU());
			pstmt.setInt(3, dxmxb.getBJLX());
			
			rs = pstmt.executeQuery();
			while (rs.next()) {
				count++;
			}
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		//已经存在
		if (count > 0) {
			return "hasExit";
		}else{
			
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			String sql = "";
			if (dxmxb.getBJLX() == 0) {
				
				sql="INSERT INTO PROJECT_DXMXB(BJSQU,SL,DXSQU,BJLX)"
						+ "VALUES(?,?,?,?)";
			}else {
				 sql="INSERT INTO PROJECT_DXMXB(BJSQU,SL,DXSQU,BJLX)"
						+ "VALUES(?,?,?,?)";	
			}
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dxmxb.getBJSQU());
			pstmt.setInt(2, dxmxb.getSL());
			pstmt.setString(3, dxmxb.getDXSQU());
			pstmt.setInt(4, dxmxb.getBJLX());
			
			pstmt.executeUpdate();
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "addSuccess";
		
		}
	}

	/** 
	 * TODO 删除支架部件
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#delKzzjBj(java.lang.String, java.lang.String)
	 */
	@Override
	public String delKzzjBj(String dxsqu, String bjsqu) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int row = 0;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);

			String sql = "delete from PROJECT_DXMXB where DXSQU = ? and BJSQU = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dxsqu);
			pstmt.setString(2, bjsqu);
			row = pstmt.executeUpdate();
			conn.commit();
			
			
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		if (row == 0) {
			return "delError";
		}else{
		return "delSuccess";
	}
}

	/** 
	 * TODO 编辑抗震支架部件明细
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#editKzzjBj(monitor.kzzjMxpz.bean.entity.Dxmxb)
	 */
	@Override
	public String editKzzjBj(Dxmxb dxmxb) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);

			String sql = "update PROJECT_DXMXB SET SL=? where DXSQU = ? AND BJSQU = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, dxmxb.getSL());
			pstmt.setString(2, dxmxb.getDXSQU());
			pstmt.setString(3, dxmxb.getBJSQU());
			
			pstmt.executeUpdate();
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "editSuccess";
		
	}

	/** 
	 * TODO 查询组合部件
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#selectZhbjInfo()
	 */
	@Override
	public List<Map<String, String>> selectZhbjInfo() {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sql = new StringBuffer();
		List<Map<String, String>> list = new ArrayList<Map<String, String>>();
		// 获取连接
		try {
		conn = datasource.getConnection();
		
		sql.append("SELECT * FROM PROJECT_DXZHMXB T  ORDER BY T.CJSJ DESC");
	
		pstmt = conn.prepareStatement(sql.toString());
		rs = pstmt.executeQuery();
		Map<String, String> map = null ;
		while (rs.next()) {
			map = new HashMap<String, String>();
			map.put("ZHSQU", rs.getString("ZHSQU"));
			map.put("GDLX", rs.getString("GDLX"));
			map.put("AZFS", rs.getString("AZFS"));
			map.put("ZJXS", rs.getString("ZJXS"));
			map.put("DXZHMC", rs.getString("DXZHMC"));
			map.put("ZP", rs.getString("ZP"));	
			
			list.add(map);
		}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		try {
			this.closeCon(conn, pstmt, rs);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}

	/** 
	 * TODO 简单描述该方法的实现功能
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#selectZhbjInfoById(java.lang.String)
	 */
	@Override
	public List<Map<String, String>> selectZhbjInfoById(String ZHSQU) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sql = new StringBuffer();
		List<Map<String, String>> list = new ArrayList<Map<String, String>>();
		// 获取连接
		try {
		conn = datasource.getConnection();
		
		sql.append("SELECT * FROM PROJECT_DXZHMXB T WHERE T.ZHSQU = '"+ZHSQU +"'");
	
		pstmt = conn.prepareStatement(sql.toString());
		rs = pstmt.executeQuery();
		Map<String, String> map = null ;
		while (rs.next()) {
			map = new HashMap<String, String>();
			map.put("ZHSQU", rs.getString("ZHSQU"));
			map.put("GDLX", rs.getString("GDLX"));
			map.put("AZFS", rs.getString("AZFS"));
			map.put("ZJXS", rs.getString("ZJXS"));
			map.put("DXZHMC", rs.getString("DXZHMC"));
			map.put("ZP", rs.getString("ZP"));	
			
			list.add(map);
		}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		try {
			this.closeCon(conn, pstmt, rs);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return list;
	}

	/** 
	 * TODO 简单描述该方法的实现功能
	 * @see monitor.kzzjMxpz.dao.IKzzjMxpzDao#getKzzjBjList(monitor.user.bean.vo.PageInfoVo, java.lang.String, java.lang.String)
	 */
	@Override
	public PageInfoVo getKzzjBjList(PageInfoVo page, String dxsqu, int op,String searchKey)throws SQLException {
		List<Object> list = new ArrayList<>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		PreparedStatement pstmt1 = null;
		ResultSet rs1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs2 = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs3 = null;
		String sql = null;
	if (op == 0) {
		sql ="SELECT COUNT(*) FROM (SELECT A.* FROM(SELECT D.DXSQU,D.BJSQU,D.SL,C.* FROM PROJECT_DXMXB D ,PROJCRT_CPMXB C WHERE  D.BJSQU = C.SQU AND  D.DXSQU ='"+dxsqu+"'AND D.BJLX = '"+op+"'AND C.CYMC LIKE'%"+searchKey+"%')A)";
	}else {
		sql ="SELECT COUNT(*) FROM(SELECT A.* FROM (SELECT  D.DXSQU,D.BJSQU,D.SL,DH.* FROM PROJECT_DXMXB D,PROJECT_DXZHMXB DH WHERE D.BJSQU = DH.ZHSQU  AND D.DXSQU ='"+dxsqu+"'AND DH.DXZHMC LIKE'%"+searchKey+"%')A)";
	}
//			 sql = "SELECT COUNT(*) FROM PROJECT_DXMXB T WHERE T.DXSQU ='"+dxsqu +"'AND T.BJLX ='"+op+"'";
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				page.setTotal(rs.getInt(1));
			}
			
			int startIndex = (page.getPageNumber() - 1) * page.getPageSize() + 1;
			StringBuffer sbsql = new StringBuffer();
			
			int rn = startIndex + page.getPageSize();
			//普通部件
			if (op == 0) {
				
				sbsql.substring(0, sbsql.length());
				
				sbsql.append(" SELECT * FROM ( SELECT A.*,ROWNUM RN FROM (");
				sbsql.append(" SELECT D.DXSQU,D.BJSQU,D.SL,C.* FROM PROJECT_DXMXB D ,PROJCRT_CPMXB C WHERE"); 
				sbsql.append(" D.BJSQU = C.SQU AND  D.DXSQU ='"+dxsqu+"'AND D.BJLX = '"+op+"'AND C.CYMC LIKE'%"+searchKey+"%'ORDER BY D.CJSJ DESC )A) ");
				sbsql.append("WHERE RN<"+rn+" AND RN>="+startIndex);
				
			pstmt1 = conn.prepareStatement(sbsql.toString());
			rs1 = pstmt1.executeQuery();
			
			CpmxbDto cpmxbDto= null;
			while (rs1.next()) {
				cpmxbDto = new CpmxbDto();

				cpmxbDto.setBJXH(rs1.getString("BJXH"));
				cpmxbDto.setCBDJ(rs1.getString("CBDJ"));
				cpmxbDto.setCPBM(rs1.getString("CPBM"));
				cpmxbDto.setCPTZ(rs1.getString("CPTZ"));
				cpmxbDto.setCPXH(rs1.getString("CPXH"));
				cpmxbDto.setCYMC(rs1.getString("CYMC"));
				cpmxbDto.setCPXL(rs1.getString("CPXL"));
				//产品子目处理
				if (rs1.getString("CPZM")!=null) {
					String cpzm = rs1.getString("CPZM");
					String sq = "select * from PROJECT_WZZDB t where t.SQU = ('"+cpzm+"')";
					pstmt2 = conn.prepareStatement(sq);
					rs2 =  pstmt2.executeQuery();
					while (rs2.next()) {
						cpmxbDto.setCPZM(rs2.getString("LBMC"));
					}
				}else {
					cpmxbDto.setCPZM(rs1.getString("CPZM"));
				}
				
				cpmxbDto.setEDHL(rs1.getString("EDHL"));
				cpmxbDto.setJLDW(rs1.getString("JLDW"));
//				cpmxbDto.setLBMC(rs1.getString("LBMC"));
				cpmxbDto.setSQU(rs1.getString("BJSQU"));
				cpmxbDto.setZP(rs1.getString("ZP"));
				cpmxbDto.setSL(Integer.parseInt(rs1.getString("SL")));

				list.add(cpmxbDto);
			}	
			
			page.setRows(list);
			this.closeCon(conn, pstmt, rs);
			this.closeCon(conn, pstmt1, rs1);
			this.closeCon(conn, pstmt2, rs2);
			
			return page;
		}else {//组合部件
			sbsql.substring(0, sbsql.length());
			sbsql.append(" SELECT * FROM ( SELECT A.*,ROWNUM RN FROM (");
			sbsql.append(" SELECT  D.DXSQU,D.BJSQU,D.SL,DH.* FROM PROJECT_DXMXB D,PROJECT_DXZHMXB DH WHERE"); 
			sbsql.append(" D.BJSQU = DH.ZHSQU  AND D.DXSQU ='"+dxsqu+"'AND DH.DXZHMC LIKE'%"+searchKey+"%'ORDER BY D.CJSJ DESC)A) ");
			sbsql.append("WHERE RN<"+rn+" AND RN>="+startIndex);
			
			pstmt3 = conn.prepareStatement(sbsql.toString());
			rs3 = pstmt3.executeQuery();
			
			DxzhMxbDto dxzhMxbDto = null;
			while (rs3.next()) {
				dxzhMxbDto = new DxzhMxbDto();
				dxzhMxbDto.setZHSQU(rs3.getString("ZHSQU"));
				dxzhMxbDto.setDXZHMC(rs3.getString("DXZHMC"));
				dxzhMxbDto.setAZFS(rs3.getString("AZFS"));
				dxzhMxbDto.setGDLX(rs3.getString("GDLX"));
				dxzhMxbDto.setZJXS(rs3.getString("ZJXS"));
				dxzhMxbDto.setZP(rs3.getString("ZP"));
				
				dxzhMxbDto.setSL(Integer.parseInt(rs3.getString("SL")));

				list.add(dxzhMxbDto);
			}	
			
			page.setRows(list);
			this.closeCon(conn, pstmt3, rs3);
			this.closeCon(conn, pstmt, rs);
			
			return page;
				
		}
			
	}

}
