package monitor.user.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import monitor.common.dao.BaseDAO;
import monitor.common.exception.DaoException;
import monitor.common.util.StringConvert;
import monitor.user.bean.dto.ModuleMainDto;
import monitor.user.bean.dto.ModuleSubDto;
import monitor.user.bean.dto.UserDto;
import monitor.user.bean.dto.UserLoginInfoDto;
import monitor.user.bean.entity.RoleEntity;
import monitor.user.bean.entity.UserEntity;
import monitor.user.bean.vo.PageInfoVo;
import monitor.user.dao.IRoleDAO;
import monitor.user.dao.IUserDAO;
import net.sf.json.JSONObject;

/**
 * <description>
 * @author cl
 * @datetime 2011-4-18 上午10:54:53
 */
public class UserDAOImpl extends BaseDAO implements IUserDAO {
	
	private IRoleDAO roleDAO = null;

	public IRoleDAO getRoleDAO() {
		return roleDAO;
	}

	public void setRoleDAO(IRoleDAO roleDAO) {
		this.roleDAO = roleDAO;
	}

	/**
	  * login:登录
	  * @author 黄月
	  * @date  2017-11-10 下午3:38:43
	  * @param user
	  * @return 
	*/
	public UserDto login(UserDto user) {
		UserDto userDto = null;

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			String sql="";
			if (user.getUsername() == "admin" || user.getUsername().equals("admin")) {
				sql = "SELECT * FROM SSP_TUSERINFO WHERE USERNAME='admin' AND PWD ='" + StringConvert.getBASE64(user.getPwd()) + "'";
				pstmt = conn.prepareStatement(sql);
			}else{
				sql = "SELECT * FROM SSP_TUSERINFO WHERE LOGINCODE = ?";
				String baseLoginCode = user.getUsername() + user.getPwd();// 登录识别码
				pstmt = conn.prepareStatement(sql);
				String a=StringConvert.getBASE64(baseLoginCode);
				pstmt.setString(1, a);
			} 
			
			rs = pstmt.executeQuery();
			UserEntity userEntity = null;
			while (rs.next()) {
				userEntity = new UserEntity();
				userEntity.setSqu(rs.getInt("squ"));
				userEntity.setRoleSqu(rs.getInt("roleSqu"));
				userEntity.setUserTitle(rs.getString("userTitle").trim());
				userEntity.setUsername(rs.getString("username").trim());
				userEntity.setPwd(rs.getString("pwd").trim());
				userEntity.setDescb(rs.getString("descb"));
				userEntity.setIsDefault(rs.getInt("isDefault"));
				userEntity.setIsEnabled(rs.getInt("isEnabled"));
				
				userEntity.setSfzhm(rs.getString("sfzhm"));
				userEntity.setValidTime(rs.getString("validTime"));
				userEntity.setCrreateTime(rs.getString("crreateTime"));
				userEntity.setLoginCode(rs.getString("loginCode"));
				RoleEntity roleEntity = roleDAO.findRoleBySqu(userEntity.getRoleSqu());

				userDto = new UserDto(userEntity);
				userDto.setRoleEntity(roleEntity);
			}
		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			closed(rs, pstmt, conn);
		}
		return userDto;
	}

	/**
	 * @查询所有用户信息
	 * @author: cl
	 * @param
	 * @return List<UserDto>
	 * @deprecated
	 */
	public List<UserDto> listUsers() {
		List<UserDto> userList = new ArrayList<UserDto>();

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			String sql = "select * from SSP_TUserInfo";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			UserEntity userEntity = null;
			UserDto userDto = null;
			while (rs.next()) {
				userEntity = new UserEntity();
				userEntity.setSqu(rs.getInt("squ"));
				userEntity.setRoleSqu(rs.getInt("roleSqu"));
				userEntity.setUserTitle(rs.getString("userTitle").trim());
				userEntity.setUsername(rs.getString("username").trim());
				userEntity.setPwd(rs.getString("pwd").trim());
				userEntity.setDescb(rs.getString("descb"));
				userEntity.setIsEnabled(rs.getInt("isEnabled"));
				userEntity.setIsDefault(rs.getInt("isDefault"));

				userDto = new UserDto(userEntity);// 将实体bean封装成传输bean
				userList.add(userDto);
			}
		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return userList;
	}

	/**
	 * @返回通过PageInfoVo封装后的用户列表，已通过分页处理
	 * @author: cl
	 * @param
	 * @return PageInfoVo
	 */
	public PageInfoVo listUsersInPage(PageInfoVo page) {
		List<UserDto> userList = new ArrayList<UserDto>();

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			String sql = " SELECT COUNT(*) FROM (SELECT T.*,TT.BMDM,TT.BMMC FROM SSP_TUSERINFO T LEFT JOIN (SELECT T1.*,T2.BMMC FROM T_BM_USER T1, T_BM_NEW T2 WHERE T1.BMDM = T2.BMDM ) TT ON T.SQU = TT.USERSQU(+)) " + page.getQuery();
System.out.println(sql);
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				page.setTotal(rs.getInt(1));
			}

			int startIndex = (page.getPageNumber() - 1) * page.getPageSize() + 1;
			sql = " SELECT A1.*, A2.ROLENAME FROM (SELECT MY_TABLE.*, ROWNUM AS MY_ROWNUM FROM ( " +
					"SELECT T.*,TT.BMDM,TT.BMMC FROM SSP_TUSERINFO T LEFT JOIN (SELECT T1.*,T2.BMMC FROM T_BM_USER T1, T_BM_NEW T2 WHERE T1.BMDM = T2.BMDM )" +
					" TT ON T.SQU = TT.USERSQU(+) "
					+ page.getQuery() + " ) MY_TABLE WHERE ROWNUM < " + (startIndex + page.getPageSize()) + ") A1, "
					+ " SSP_TROLEINFO A2 WHERE A1.ROLESQU = A2.SQU AND MY_ROWNUM >= "
					+ startIndex;
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			UserEntity userEntity = null;
			UserDto userDto = null;
			while (rs.next()) {
				userEntity = new UserEntity();
				userEntity.setSqu(rs.getInt("squ"));
				userEntity.setRoleSqu(rs.getInt("roleSqu"));
				userEntity.setUserTitle(rs.getString("userTitle").trim());
				userEntity.setUsername(rs.getString("username").trim());
				userEntity.setPwd(StringConvert.getFromBASE64(rs.getString("pwd").trim()));
				userEntity.setDescb(rs.getString("descb"));
				userEntity.setIsEnabled(rs.getInt("isEnabled"));
				userEntity.setIsDefault(rs.getInt("isDefault"));
				userEntity.setSfzhm(rs.getString("sfzhm"));
				userEntity.setValidTime(rs.getString("validtime"));
				userEntity.setCrreateTime(rs.getString("crreatetime"));
				userEntity.setLoginCode(rs.getString("loginCode"));
				
				userEntity.setDeptID(rs.getString("BMDM"));
				userEntity.setDeptName(rs.getString("BMMC"));

				// 加入角色名称，用于界面grid显示
				RoleEntity role = new RoleEntity();
				role.setSqu(rs.getInt("squ"));
				role.setRoleName(rs.getString("rolename"));

				userDto = new UserDto(userEntity);// 将实体bean封装成传输bean
				userDto.setRoleEntity(role);
				userList.add(userDto);
			}
			
			page.setRows(userList);
		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			closed(rs, pstmt, conn);
		}
		return page;
	}

	/**
	  * addUser:新增用户
	  * @date  2017-11-10 下午3:17:26
	  * @param userDto
	  * @return 
	*/
	public String addUser(UserDto userDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;	
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			
			String sql = "SELECT * FROM SSP_TUSERINFO WHERE USERNAME=?";
			pstmt = conn.prepareStatement(sql);
			
			String username = userDto.getUsername();
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return "nameHasExist";
			}
			pstmt.close();
			
			String sql2 = " SELECT SEQ_TUSERINFO.NEXTVAL FROM DUAL ";
			pstmt = conn.prepareStatement(sql2);
			rs = pstmt.executeQuery();
			rs.next();
			int usersqu = rs.getInt(1);
			
			StringBuilder sbSql = new StringBuilder();
			sbSql.append(" INSERT INTO SSP_TUSERINFO(SQU,ROLESQU,USERTITLE,USERNAME,PWD,DESCB,ISDEFAULT, ");
			sbSql.append(" ISENABLED,SFZHM,VALIDTIME,IP,CRREATETIME,LOGINCODE) ");
			sbSql.append(" VALUES(" + usersqu + ",?,?,?,?,?,0,?,?, ");
			sbSql.append(" TO_DATE(TO_CHAR(SYSDATE+7,'yyyy-MM-dd HH24:mi:ss'),'yyyy-MM-dd HH24:mi:ss'),'127.0.0.1', ");
			sbSql.append(" TO_DATE(TO_CHAR(SYSDATE,'yyyy-MM-dd HH24:mi:ss'),'yyyy-MM-dd HH24:mi:ss'),?) ");
			
			pstmt = conn.prepareStatement(sbSql.toString());
			pstmt.setInt(1, userDto.getRoleSqu());
			pstmt.setString(2, userDto.getUserTitle());
			pstmt.setString(3, username);
			
			String pwd = userDto.getPwd();
			pstmt.setString(4, StringConvert.getBASE64(pwd));
			pstmt.setString(5, userDto.getDescb());
			pstmt.setInt(6, userDto.getIsEnabled());
			pstmt.setString(7, userDto.getSfzhm());
			
			String loginCode = StringConvert.getBASE64(username + pwd);
			pstmt.setString(8, loginCode);
			
			pstmt.executeUpdate();
			pstmt.close();
			
			//写入部门用户中间表
			StringBuilder sbSql2 = new StringBuilder();
			sbSql2.append(" INSERT INTO T_BM_USER(BMDM,USERSQU) VALUES(?,?) ");
			pstmt = conn.prepareStatement(sbSql2.toString());
			pstmt.setString(1, userDto.getDeptID());
			pstmt.setInt(2, usersqu);
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			closed(rs, pstmt, conn);
		}
		return "addSuccess";
	}

	/**
	  * editUser:修改用户
	  * @author 黄月
	  * @date  2017-11-10 下午3:26:30
	  * @param userDto
	  * @return 
	*/
	public String editUser(UserDto userDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
	//	System.out.println("userDto:" + userDto);
		
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			
			StringBuilder sql = new StringBuilder();
			sql.append(" UPDATE SSP_TUSERINFO SET ROLESQU = ?, USERTITLE = ?, USERNAME = ?, ");
			sql.append(" PWD = ?, DESCB = ?, ISENABLED = ?, SFZHM = ?, ");
			sql.append(" VALIDTIME = TO_DATE(?,'yyyy-MM-dd HH24:mi:ss'), LOGINCODE = ? WHERE SQU = ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setInt(1, userDto.getRoleSqu());
			pstmt.setString(2, userDto.getUserTitle());
			pstmt.setString(3, userDto.getUsername());
			pstmt.setString(4, StringConvert.getBASE64(userDto.getPwd()));
			pstmt.setString(5, userDto.getDescb());
			pstmt.setInt(6, userDto.getIsEnabled());
			pstmt.setString(7, userDto.getSfzhm());
			String vt = userDto.getValidTime();
			if (vt.indexOf(".") > 0) {
			    pstmt.setString(8, vt.substring(0, vt.indexOf(".")));
			} else {
			    pstmt.setString(8, vt);
			}
			String loginCode = userDto.getUsername() + userDto.getPwd();
			pstmt.setString(9, StringConvert.getBASE64(loginCode));
			pstmt.setInt(10, userDto.getSqu());
			pstmt.executeUpdate();
			pstmt.close();
			
			//修改部门用户中间表
			StringBuilder sql2 = new StringBuilder();
			sql2.append(" UPDATE T_BM_USER SET BMDM = ? WHERE USERSQU = ? ");
			pstmt = conn.prepareStatement(sql2.toString());
			pstmt.setString(1, userDto.getDeptID());
			pstmt.setInt(2, userDto.getSqu());
			pstmt.executeUpdate();
			
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			closed(rs, pstmt, conn);
		}
		return "editSuccess";
	}

	public String deleteUser(UserDto userDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);

			// 判断是否是默认用户
			String sql = "select * from ssp_tuserinfo where squ = ? and isdefault = 1";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, userDto.getSqu());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				return "defaultUser";
			}

			sql = "delete from ssp_tuserinfo where squ = ? and isdefault = 0";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, userDto.getSqu());
			pstmt.executeUpdate();

			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "deleteSuccess";
	}

	public List<ModuleMainDto> listModules(UserDto dto) {
		List<ModuleMainDto> mainList = new ArrayList<ModuleMainDto>();

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ResultSet rs2 = null;
		try {
			conn = datasource.getConnection();

			String sql = "select * from ssp_tmodulemain order by FLAG";
		//	System.out.println(sql);
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				ModuleMainDto mainDto = new ModuleMainDto();
				int mainSqu = rs.getInt("squ");
				List<ModuleSubDto> subDtoList = new ArrayList<ModuleSubDto>();

				sql = "select * from SSP_TRole_ModuleSub t1,ssp_tmodulesub t2 where t1.subsqu = t2.squ and t2.mainsqu = ? and t1.rolesqu = ? order by t2.dispOrder";
				//System.out.println("========"+sql+"="+mainSqu+"="+dto.getRoleSqu());
				pstmt = conn.prepareStatement(sql);
				pstmt.setInt(1, mainSqu);
				pstmt.setInt(2, dto.getRoleSqu());
				rs2 = pstmt.executeQuery();
				while (rs2.next()) {
					ModuleSubDto subDto = new ModuleSubDto();
					subDto.setSqu(rs2.getInt("squ"));
					subDto.setName(rs2.getString("name").trim());
					subDto.setEntryUrl(rs2.getString("entryurl").trim());
					//subDto.setImageUrl(rs2.getString("imgUrl"));
					subDtoList.add(subDto);
				}

				mainDto.setSqu(mainSqu);
				mainDto.setName(rs.getString("name").trim());
				mainDto.setSubModuleList(subDtoList);

				mainList.add(mainDto);
			}
		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (rs2 != null) {
					rs2.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return mainList;
	}

	public int recordUserLogin(UserLoginInfoDto userLoginDto) {
		int loginInfoSqu = -1;

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			//Modification Start 2016-3-7------- 
			String sql = "insert into LOG_INFO(NUM_ID,USER_ID,ORGANIZATION,USER_NAME,TERMINAL_ID,OPERATE_TYPE,OPERATE_TIME,OPERATE_CONDITION,OPERATE_RESULT) values(LOG_INFO_NUM_ID.NEXTVAL,?,?,?,?,?,TO_CHAR(sysdate,'YYYYMMDDHH24MISS'),?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userLoginDto.getUser_id());//用户身份证号
			pstmt.setString(2, userLoginDto.getOrganization());
			pstmt.setString(3, userLoginDto.getUserInfo());
			pstmt.setString(4, userLoginDto.getLoginIp());
			pstmt.setString(5, userLoginDto.getOperate_type());
//			pstmt.setString(6, userLoginDto.getLoginDatetime());
//			System.out.println(userLoginDto.getLoginDatetime());
			pstmt.setString(6, userLoginDto.getOperate_condition());
			pstmt.setString(7, userLoginDto.getOperate_result());
			pstmt.executeUpdate();

			sql = "select num_id from LOG_INFO where user_id = ? and terminal_id = ? and operate_time = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userLoginDto.getUserInfo());
			pstmt.setString(2, userLoginDto.getLoginIp());
			pstmt.setString(3, userLoginDto.getLoginDatetime());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				loginInfoSqu = rs.getInt("num_id");
			}

			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return loginInfoSqu;
	}

	public void recordUserLogout(UserLoginInfoDto userLoginInfoDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);

			String sql = "update LOG_INFO set OPERATE_TIME = to_date(?,'yyyy-mm-dd HH24:mi:ss') where num_id = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userLoginInfoDto.getLogoutDatetime());
			pstmt.setInt(2, userLoginInfoDto.getSqu());
			pstmt.executeUpdate();

			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
	}

	public String getMain() {
		Map<String, ModuleSubDto> moduleSubMap = new HashMap<String, ModuleSubDto>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			String sql = "select * from ssp_tmodulesub";
		//	System.out.println("="+sql);
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				ModuleSubDto moduleSubDto = new ModuleSubDto();
				moduleSubDto.setSqu(rs.getInt("SQU"));
				moduleSubDto.setName(rs.getString("NAME"));
				moduleSubDto.setMainSqu(rs.getInt("MAINSQU"));
				moduleSubDto.setImageUrl(rs.getString("IMGURL"));
				moduleSubDto.setEntryUrl(rs.getString("ENTRYURL"));
				moduleSubMap.put("_" + rs.getInt("squ"), moduleSubDto);
			}
			System.out.println(JSONObject.fromObject(moduleSubMap));
			System.out.println(JSONObject.fromObject(moduleSubMap).get("_1004"));

		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return null;
	}

	public UserDto getUser() {
		UserDto userVo = new UserDto();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			String sql = "select * from ssp_tuserinfo where username='admin'";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				userVo.setSqu(rs.getInt("squ"));
				userVo.setRoleSqu(rs.getInt("roleSqu"));
				userVo.setUserTitle(rs.getString("userTitle").trim());
				userVo.setUsername(rs.getString("username").trim());
				userVo.setPwd(rs.getString("pwd").trim());
				userVo.setDescb(rs.getString("descb"));
				userVo.setIsEnabled(rs.getInt("isEnabled"));
				userVo.setIsDefault(rs.getInt("isDefault"));
			}
		} catch (Exception e) {
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return userVo;
	}
	
	private void closed(ResultSet rs, PreparedStatement ps, Connection conn) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if (rs != null) {
			try {
				ps.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}
