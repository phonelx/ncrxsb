/***
	* copyright ：  xindongsheng Technologies Co., Ltd. Copyright 2010-9999,  All rights reserved 
	* Project Name:jgdl
	* @since：JDK1.6
	* @version：1.0
	* File Name:KzzjDaoImpl.java
	* Date:2017-10-17下午2:14:02   
	***/
package monitor.kzzj.dao.impl;


import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import monitor.common.dao.BaseDAO;
import monitor.common.exception.DaoException;
import monitor.common.util.Base64Util;
import monitor.kzzj.bean.entity.KzzjBean;
import monitor.kzzj.dao.IKzzjDao;


import monitor.user.bean.vo.PageInfoVo;

/**
 * @ClassName:KzzjDaoImpl
 * @dateTime: 2017-10-17 下午2:14:02
 * @Description: TODO
 * @version 
 * @author: 康正秋
 * @since JDK 1.6
 * History：
 * Editor     version      Time               Operation
 */
public class KzzjDaoImpl extends BaseDAO implements IKzzjDao {
	
	private Connection conn = null ;
	private PreparedStatement pstmt = null ;
	private ResultSet rs = null ;
	
	public int getAllCnts(String sql) {
		int cnt = 0 ;
		try {
			// 获取连接
			conn = datasource.getConnection() ;
			
			// 查询总条数
			pstmt = conn.prepareStatement(sql) ;
			rs = pstmt.executeQuery();
			if(rs.next()) cnt = rs.getInt(1) ;
		} catch (Exception e) {
			throw new DaoException("数据库异常",e);
		} finally{
			try {
				if(rs != null) rs.close() ;
				if(pstmt != null) pstmt.close() ;
				if(conn != null) conn.close() ;
			} catch (SQLException e) {
				throw new DaoException("数据库异常",e);	
			}
		}

		return cnt ;
	}
	

	/** 
	 * TODO 抗震支架列表
	 * @see monitor.kzzjJbpz.dao.IKzzjDao#listKzzj(monitor.user.bean.vo.PageInfoVo, java.lang.String)
	 */
	@Override
	public PageInfoVo listKzzj(PageInfoVo pageVo, String searchKey)throws SQLException {
		
		Connection conn1 = null ;
		PreparedStatement pstmt1 = null ;
		ResultSet rs1 = null ;
		
		String SQL="SELECT DXSQU FROM PROJECT_DXINFO "
				+" WHERE DXMC=? ORDER BY DXSQU";
		//System.out.println(SQL);
		int startIndex = (pageVo.getPageNumber() -1)*pageVo.getPageSize() +1;
		String countSql = "SELECT COUNT(*) FROM ";
		String listSql = "SELECT * FROM ";
		StringBuffer sql= new StringBuffer();
		sql.append(" (SELECT B.*,ROWNUM RN FROM (SELECT T.* FROM PROJECT_DXINFO T WHERE 1=1"+searchKey+" ORDER BY T.DXSQU )B) ");
		countSql+=sql.toString();
		sql.append("WHERE RN>="+startIndex+" AND RN <"+(startIndex+pageVo.getPageSize()));
		
		
		List<Map<String, Object>> listMap=new ArrayList<Map<String,Object>>();
		conn=datasource.getConnection();
		pstmt=conn.prepareStatement(listSql+sql.toString());
		System.out.println(listSql+sql.toString());
		rs=pstmt.executeQuery();
		ResultSetMetaData rsmd = rs.getMetaData();
		while (rs.next()) {
			Map<String,Object> map = new LinkedHashMap<String,Object>();
			String bmdm="";
			for (int i = 1; i <= rsmd.getColumnCount(); i++) {
				if (rsmd.getColumnClassName(i).endsWith("BLOB")) {// 处理blob字段
					// 转换为Base64编码
					InputStream in = rs.getBinaryStream(rsmd.getColumnName(i));
					map.put(rsmd.getColumnName(i), Base64Util.Base64Encoder(in, null));
				} else {
					// 将空对象转换为 空串
					String val = rs.getString(i) == null ? "" : rs.getString(i);
					// 处理日期
					if (val.endsWith("00:00:00"))
						val = val.substring(0, val.indexOf("00:00:00"));
					// 将空对象转换为 空串
					map.put(rsmd.getColumnName(i), val);
					bmdm=val;
				}
				
				//System.out.println(rsmd.getColumnName(i));
				if(rsmd.getColumnName(i).equals("BMDM")||rsmd.getColumnName(i)=="BMDM"){
					conn1=datasource.getConnection();
					pstmt1=conn1.prepareStatement (SQL);
					pstmt1.setString(1, bmdm);
					rs1=pstmt1.executeQuery();
					String squ="";
					String title="";
					while(rs1.next()){
						squ=squ+rs1.getString("SQU")+",";
						title=title+rs1.getString("USERTITLE")+",";
					}
					
					if(squ.length()>0){
						squ=squ.substring(0, squ.length()-1);
						title=title.substring(0, title.length()-1);
					}
					
					map.put("USERSQU",squ);
					map.put("USERTITLE",title);
					
					close(conn1, pstmt1, rs1);
				}
			}
			listMap.add(map);
		}
		
		pageVo.setTotal(getAllCnts(countSql));
		pageVo.setRows(listMap);

		return pageVo;
	}
	/** 
	 * TODO抗震支架添加
	 * @see monitor.kzzjJbpz.dao.IKzzjDao#addKzzj(monitor.kzzjJbpz.bean.entity.KzzjBean)
	 */
	@Override
	public String addKzzj(KzzjBean kzzjBean) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		System.out.println(kzzjBean);
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			
			String sql="INSERT INTO PROJECT_DXINFO(GDLX,AZFS,ZJXS,DXMC,ZP)"
				+ "VALUES(?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, kzzjBean.getGdlx());
			pstmt.setString(2, kzzjBean.getAzfs());
			pstmt.setString(3, kzzjBean.getZjxs());
			pstmt.setString(4, kzzjBean.getDxmc());
			pstmt.setString(5, kzzjBean.getZp());

			pstmt.executeUpdate();
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "addSuccess";
	}
	
	/** 
	 * TODO 删除抗震支架
	 * @see monitor.kzzjJbpz.dao.IKzzjDao#delKzzj(java.lang.String)
	 */
	@Override
	public String delKzzj(String dxSqu) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);

			String sql = "delete from PROJECT_DXINFO where DXSQU = ? ";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dxSqu);
			pstmt.executeUpdate();

			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "delSuccess";
	}

	/** 
	 * TODO 编辑抗震支架
	 * @see monitor.kzzjJbpz.dao.IKzzjDao#editKzzj(monitor.kzzjJbpz.bean.entity.KzzjBean)
	 */
	@Override
	public String editKzzj(KzzjBean kzzj) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		System.out.println("kzzj:"+kzzj);
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			String sql = "UPDATE PROJECT_DXINFO SET GDLX=?,AZFS=?,ZJXS=?,DXMC=?,ZP=? where DXSQU = ?";
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, kzzj.getGdlx());
			pstmt.setString(2, kzzj.getAzfs());
			pstmt.setString(3, kzzj.getZjxs());
			pstmt.setString(4,kzzj.getDxmc());
			pstmt.setString(5, kzzj.getZp());
			pstmt.setString(6, kzzj.getDxSqu());
			
			pstmt.executeUpdate();
			conn.commit();
		} catch (Exception e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				throw new DaoException(e);
			}
			throw new DaoException(e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new DaoException(e);
			}
		}
		return "editSuccess";

	}
	
	
	public static void close(Connection conn, PreparedStatement stmt,ResultSet rs) {
		try {
			if (null != rs)
				rs.close();
			if (null != stmt)
				stmt.close();
			if (null != conn)
				conn.close();
		} catch (Throwable e) {
		}
	}


	
}
