package monitor.dispatched.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import monitor.common.dao.BaseDAO;
import monitor.dispatched.bean.dto.DispatchedDto;
import monitor.dispatched.dao.IDispatchedDao;

public class DispatchedDaoImpl extends BaseDAO implements IDispatchedDao {

	@Override
	public String addDispatched(DispatchedDto dispatchedDto) {
		StringBuffer sql = new StringBuffer();
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			sql.append("INSERT INTO T_BKRY(GMSFHM,XM,RYLX,CJSJ,SXSJ,LRRSQU,HJDZ,BKZT,BKSY,BZ,SPRSQU) VALUES(");
			sql.append("?,?,?,SYSDATE,SYSDATE+NUMTODSINTERVAL(7,'DAY'),?,?,?,?,?,?)");
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, dispatchedDto.getGmsfhm());
			pstmt.setString(2, dispatchedDto.getXm());
			pstmt.setInt(3, dispatchedDto.getRylx());
			pstmt.setInt(4, dispatchedDto.getLrrsqu());
			pstmt.setString(5, dispatchedDto.getHjdz());
			pstmt.setInt(6, dispatchedDto.getBkzt());
			pstmt.setString(7, dispatchedDto.getBksy());
			pstmt.setString(8, dispatchedDto.getBz());
			pstmt.setInt(9, dispatchedDto.getSprsqu());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			return "addError";
		} finally {
			close(conn, pstmt, null);
		}
		return "addSuccess";
	}

	@Override
	public String deleteDispatched(DispatchedDto dispatchedDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = datasource.getConnection();
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE T_BKRY SET BKZT='4' WHERE GMSFHM=? AND LRRSQU=? ");
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, dispatchedDto.getGmsfhm());
			pstmt.setInt(2, dispatchedDto.getLrrsqu());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			return "editError";
		} finally {
			close(conn, pstmt, null);
		}
		return "editSuccess";
	}

	@Override
	public String editDispatched(DispatchedDto dispatchedDto) {
		StringBuffer sql = new StringBuffer();
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			sql.append("UPDATE T_BKRY SET GMSFHM=,XM=,RYLX=,CJSJ=,SXSJ=,HJDZ=,BKZT=,BKSY=,BZ=,SPRSQU=");
			sql.append("WHERE GMSFHM=? AND LRRSQU=?  ");
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, dispatchedDto.getGmsfhm());
			pstmt.setString(2, dispatchedDto.getXm());
			pstmt.setInt(3, dispatchedDto.getRylx());
			pstmt.setInt(4, dispatchedDto.getLrrsqu());
			pstmt.setString(5, dispatchedDto.getHjdz());
			pstmt.setInt(6, dispatchedDto.getBkzt());
			pstmt.setString(7, dispatchedDto.getBksy());
			pstmt.setString(8, dispatchedDto.getBz());
			pstmt.setInt(9, dispatchedDto.getSprsqu());
			pstmt.executeUpdate();
		} catch (SQLException e) {
			return "addError";
		} finally {
			close(conn, pstmt, null);
		}

		return "addSuccess";
	}

	/**
	  * listDispatchedInPage:查询已部署列表
	  * @author 黄月
	  * @date  2017-5-17 下午4:37:40
	  * @param dispatchedDto
	  * @param param
	  * @return 
	 * @throws SQLException 
	*/
	@Override
	public DispatchedDto listDispatchedInPage(DispatchedDto dispatchedDto,
			String paramSql) throws SQLException {
		StringBuffer sql = new StringBuffer();
		StringBuffer sqlTotal = new StringBuffer();
		sql.append(" SELECT ID,GMSFHM,XM,RYLX,TO_CHAR(CJSJ,'yyyy-mm-dd hh24:mm:ss') AS CJSJ, ");
		sql.append(" TO_CHAR(SXSJ,'yyyy-mm-dd hh24:mm:ss') AS SXSJ,LRRSQU,HJDZ,BKZT,BKSY, ");
		sql.append(" BZ,SPRSQU,LRRNAME,SPRNAME,ISNEW FROM ( "); 
		sql.append(" SELECT ROWNUM RN,T.*,T1.USERNAME AS LRRNAME,T2.USERNAME AS SPRNAME FROM T_BKRY T,"); 
		sql.append(" SSP_TUSERINFO T1,SSP_TUSERINFO T2 WHERE T.LRRSQU = T1.SQU AND T.SPRSQU = T2.SQU");
		sql.append(" AND BKZT = 1" + paramSql + ")");
		//数据条数查询
		sqlTotal.append("SELECT COUNT(*) FROM (" + sql + ")");
		int total = 0;
		total = queryTotal(sqlTotal.toString(), datasource.getConnection());
		
		
		sql.append(" WHERE RN >= " + dispatchedDto.getPageInfo().getStartIndex());
		sql.append(" AND RN < " + dispatchedDto.getPageInfo().getEndIndex());
		//System.out.println("已部署：" + sql.toString());
		//列表查询
		List<Map<String, Object>> ls = new ArrayList<Map<String,Object>>();
		ls = queryList(sql.toString(), datasource.getConnection());
		//封装分页数据
		DispatchedDto dto = new DispatchedDto();
		dto.getPageInfo().setRows(ls);
		dto.getPageInfo().setTotal(total);
		return dto;
	}


	/**
	 * close:(关闭本类中的数据库连接相关对象).<br/>
	 * @author: 桂人杰
	 * @datetime: 2017-4-17 下午2:52:58
	 * @param: @param conn
	 * @param: @param pstmt
	 * @param: @param rs
	 * @return: void
	 * @throws
	 * @since JDK 1.6
	 */
	public static void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
		try {
			if (rs != null) {
				rs.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 执行查询，返回多条记录
	 * @param conn
	 * @param sql
	 * @return
	 */
	public List<Map<String, Object>> queryList(String sql,Connection con) {
		List<Map<String, Object>> ret = new ArrayList<Map<String, Object>>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rest = null;//结果集
		try {
			conn = con;//连接
			pstmt = conn.prepareStatement(sql);//创建
			rest = pstmt.executeQuery();//获取结果集
			ResultSetMetaData metaData = rest.getMetaData();
			while(rest.next()){
				LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>() ;
				for (int i = 1; i <= metaData.getColumnCount(); i++) {
					map.put(metaData.getColumnName(i), rest.getString(i) == null ? "" : rest.getString(i).trim());
					String txt = rest.getString(i);
					if (txt != null) {
						txt = txt.replace("<@>", "'");
					}
					map.put(metaData.getColumnName(i), txt);
				} 
				ret.add(map);
			}
			return ret;
		} catch (Exception ex) {
			return null;
		} finally {
			close(conn,pstmt,rest);
		}
	}
	
	/**
	 * 获取满足条件的总条数
	 * @param sql
	 * @return
	 */
	public int queryTotal(String sql, Connection con) {
		int totalCount=0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = con;//打开连接
			pstmt = conn.prepareStatement(sql);//创建执行
			rs = pstmt.executeQuery();
			ResultSetMetaData metaData=rs.getMetaData();
			while (rs.next()) {
				for (int i = 1; i <= metaData.getColumnCount(); i++) {
					totalCount = rs.getInt(i);
				} 
			}			
		} catch (Exception ex) {
		} finally {
			close(con,pstmt,rs);
		}
		return totalCount;
	}

	/**
	  * selectTrajectory:查询人员轨迹
	  * @author 黄月
	  * @date  2017-4-25 下午3:26:28
	  * @param strIdcard
	  * @return 
	 * @throws SQLException 
	*/
	@Override
	public List<Map<String, String>> selectTrajectory(String strIdcard) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		//暂时只查询上网表
		StringBuffer sbSelect = new StringBuffer();
		sbSelect.append(" SELECT TYPE,TO_CHAR(TIME,'yyyy-MM-dd') TIME1,STR FROM (");
		//上网信息
		sbSelect.append(" SELECT '上网' TYPE, SWKSSJ TIME,'网吧名称：'||YYCSMC||';网吧地址：'||DZ||';开始时间：' ");
		sbSelect.append(" ||TO_CHAR(SWKSSJ,'yyyy-MM-dd hh24:mi:ss')||';结束时间：'||TO_CHAR(XWSJ,'yyyy-MM-dd hh24:mi:ss') ");
		sbSelect.append(" STR FROM WB_SWRY_NEW WHERE ZJHM = '" + strIdcard + "' UNION ALL ");
		//旅店信息
		sbSelect.append(" SELECT '旅店' TYPE,A.RZSJ TIME,'旅店名称：'||B.LGMC||';旅店地址：'||B.XZ||';入住房号：'||A.RZFH||';入住时间：' ");
		sbSelect.append(" ||TO_CHAR(A.RZSJ,'yyyy-MM-dd hh24:mi:ss')||';退房时间：'||TO_CHAR(A.TFSJ,'yyyy-MM-dd hh24:mi:ss') ");
		sbSelect.append(" STR FROM ZA_GNLKXX_QX A,ZA_LGXX B WHERE A.LDBM = B.LGBH (+)  ");
		sbSelect.append(" AND SFZMHM = '" + strIdcard + "' UNION ALL ");
		//火车订票信息
		sbSelect.append(" SELECT '火车订票' TYPE,SPSJ TIME,'乘车日期：'||CCRQ||';车次：'||CC||';售票时间：' ");
		sbSelect.append(" ||TO_CHAR(SPSJ,'yyyy-MM-dd hh24:mi:ss')||';始发站：'||FZ||';终点站：'||DZ||';车厢号：'||CXH||';座位号：'||ZWH STR ");
		sbSelect.append(" FROM TL_LKSMDP WHERE ZJHM = '" + strIdcard + "' UNION ALL ");
		//火车进站信息
		sbSelect.append(" SELECT '火车进站' TYPE,TGSJ TIME,'通过卡口名称：'||TGKKMC||';通过时间：'||TO_CHAR(TGSJ,'yyyy-MM-dd hh24:mi:ss') ");
		sbSelect.append(" STR FROM TL_JZRYHCSJ WHERE SFZH = '" + strIdcard + "' UNION ALL ");
		//民航订票信息
		sbSelect.append(" SELECT '民航订票' TYPE,AIR_SEG_DPT_DT_LCL TIME,'航班号：'||AIR_SEG_FLT_NBR||';当地出发日期：' ");
		sbSelect.append(" ||TO_CHAR(AIR_SEG_DPT_DT_LCL,'yyyy-MM-dd hh24:mi:ss')||';当地出发时间：'||AIR_SEG_DPT_TM_LCL||';登机机场：' ");
		sbSelect.append(" ||AIR_SEG_DPT_AIRPT_CD||';到达机场：'||AIR_SEG_ARRV_AIRPT_CD STR FROM MH_DZXXB WHERE ");
		sbSelect.append(" PAS_ID_NBR = '" + strIdcard + "' UNION ALL ");
		//民航进出港信息
		sbSelect.append(" SELECT '民航进出港' TYPE,STA_DEPTTM TIME,'航班号：'||FLT_NUMBER||';座位号：'||PSR_SEATNBR ");
		sbSelect.append(" ||';起飞航站：'||SEG_DEPT_CODE||';到达航站：'||SEG_DEST_CODE||';航班日期：'||TO_CHAR(FLT_DATE,'yyyy-MM-dd hh24:mi:ss') ");
		sbSelect.append(" ||';离港时间：'||TO_CHAR(STA_DEPTTM,'yyyy-MM-dd hh24:mi:ss')||';进港时间：' ");
		sbSelect.append(" ||TO_CHAR(STA_ARVETM,'yyyy-MM-dd hh24:mi:ss') STR FROM MH_JGXXB ");
		sbSelect.append(" WHERE CERT_NO = '" + strIdcard + "' ) ORDER BY TIME DESC");
		conn = datasource.getConnection();
		pstmt = conn.prepareStatement(sbSelect.toString());
		rs = pstmt.executeQuery();
		List<Map<String, String>> list = new ArrayList<Map<String, String>>();
		Map<String, String> map = null;
		while (rs.next()) {
			map = new HashMap<String, String>();
			map.put("TYPE", rs.getString("TYPE"));
			map.put("TIME1", rs.getString("TIME1"));
			map.put("STR", rs.getString("STR"));
			list.add(map);
		}
		close(conn, pstmt, rs);
		return list;
	}

	/**
	  * updateIsNew:修改当前已部署人员信息状态
	  * @author 黄月
	  * @date  2017-4-27 上午11:44:52
	  * @param sfzhm 
	 * @throws Exception 
	*/
	@Override
	public String updateIsNew(String sfzhm) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			String strSql = "UPDATE T_BKRY SET ISNEW = 0 WHERE GMSFHM = '" + sfzhm + "'";
			pstmt = conn.prepareStatement(strSql);
			pstmt.executeUpdate();
			conn.commit();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			close(conn, pstmt, null);
		}
		return "success";
		
	}
	
	public String findMz(String gmsfzh){
	    Connection con = null;
	    PreparedStatement ps = null;
	    ResultSet rs = null;
	    String return_mz = "";
	    try {
            con = datasource.getConnection();
            String sql = "SELECT T.MZDM FROM T_BKRY T WHERE T.GMSFHM = ?";
            ps = con.prepareStatement(sql);  
            ps.setString(1, gmsfzh);
            rs = ps.executeQuery();
            while(rs.next()){
                return_mz = rs.getString("MZDM");
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }finally{
            close(con, ps, rs);
        }
	    return return_mz;
	}
}
