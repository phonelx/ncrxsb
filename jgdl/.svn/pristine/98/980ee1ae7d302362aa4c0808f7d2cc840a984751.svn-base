package monitor.dispatched.action;

import java.sql.SQLException;

import net.sf.json.JSONObject;
import monitor.common.BaseAction;
import monitor.dispatched.bean.dto.DispatchedDto;
import monitor.dispatched.service.IOverdueService;
import com.opensymphony.xwork2.ModelDriven;

public class OverdueAction extends BaseAction implements ModelDriven<DispatchedDto> {
	
	/**
	 * @since JDK1.6
	 */
	private static final long	serialVersionUID = 1L;
	
	private IOverdueService	overdueService;
	
	private DispatchedDto dispatchedDto;
	
	public static final int ISADMIN=1;

	/**
	  * gotoOverdueIndex:(跳转已过期页面).<br/>
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).<br/>
	  * @author: 黄月
	  * @dateTime: 2017-5-17 下午3:52:43
	  * @return String
	  * @since JDK 1.7
	*/
	public String gotoOverdueIndex() {
		return SUCCESS;
	}
	
	/**
	  * toOverdueIndex:(跳转人员续期页面).<br/>
	  * @author: 黄月
	  * @dateTime: 2017-4-24 下午3:15:45
	  * @param: 
	  * @return: String
	  * @throws
	  * @since JDK 1.7
	 */
	public String toOverdueIndex(){
		String strJson = getRequest().getParameter("strJson");
		getRequest().setAttribute("personMsg", strJson);
		return SUCCESS;
	}
	/**
	 * 修改布控状态
	 */
	public void updateOverdue(){
		String msg = "";
			msg = overdueService.updateOverdue(getRequest().getParameter(
					"gmsfhm"));
		writeJsonBack(msg);
	}

	@Override
	public DispatchedDto getModel(){
		if (dispatchedDto == null) {
			return dispatchedDto = new DispatchedDto();
		}
		return dispatchedDto;
	}
	
	/**
	  * listOverdueInPage:(查询已过期列表).<br/>
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).<br/>
	  * @author: 黄月
	  * @dateTime: 2017-5-22 上午10:52:21 void
	  * @since JDK 1.7
	*/
	public void listOverdueInPage(){
		String search = getRequest().getParameter("search");
		String page = getRequest().getParameter("page");
		String rows = getRequest().getParameter("rows");
		//获取当前用户信息
		dispatchedDto.setUserdto(userDto);
		dispatchedDto.getPageInfo().setPageNumber(Integer.parseInt(page));
		dispatchedDto.getPageInfo().setPageSize(Integer.parseInt(rows));
		DispatchedDto dto = null;
		try {
			dto = overdueService.listOverdueInPage(dispatchedDto, search);
			JSONObject jsonObj = JSONObject.fromObject(dto.getPageInfo());
			writeJsonBack(jsonObj.toString());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public IOverdueService getOverdueService(){
		return overdueService;
	}

	public void setOverdueService(IOverdueService overdueService){
		this.overdueService = overdueService;
	}

	public DispatchedDto getDispatchedDto(){
		return dispatchedDto;
	}

	public void setDispatchedDto(DispatchedDto dispatchedDto){
		this.dispatchedDto = dispatchedDto;
	}
}
