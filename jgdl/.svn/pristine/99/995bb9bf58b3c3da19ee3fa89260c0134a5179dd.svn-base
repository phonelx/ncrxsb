package monitor.goodsHouse.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;


import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.struts2.ServletActionContext;

import net.sf.json.JSONObject;

import monitor.common.BaseAction;
import monitor.goodsHouse.bean.entity.Gdlx;
import monitor.goodsHouse.bean.entity.Wzzdb;
import monitor.goodsHouse.service.IPartsService;
import monitor.user.bean.dto.UserDto;
import monitor.user.bean.vo.PageInfoVo;

/**
 * @ClassName
 * @dataTime 2017-10-14-下午2:44:07
 * @version
 * @author:唐青
 * @since
 */
public class PartsAction extends BaseAction {
	/**
	 * @Fields serialVersionUID:TODO(用一句话描述这个变量表示什么)
	 * @since JDK1.7
	 */
	private static final long serialVersionUID = 1L;

	private IPartsService partsService;

	private PageInfoVo pageVo = new PageInfoVo();

	private Wzzdb wzz;

	private Gdlx gdlx;
	
	private File userUploadFile;

	public PageInfoVo getPageVo() {
		return pageVo;
	}

	public void setPageVo(PageInfoVo pageVo) {
		this.pageVo = pageVo;
	}

	/**
	 * 
	 * goPartsIndex:(跳转到部件配置页面). TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	 * 
	 * @author: 唐青
	 * @dateTime: 2017-10-14 下午3:06:17
	 * @return String
	 * @since JDK 1.7
	 */
	public String goPartsIndex() {
		List<Map<String, String>> listMenu;
		/*List<Map<String, String>> listZjLxMenu;
		List<Map<String, String>> listDzMenu;
		List<Map<String, String>> listSsXtMenu;*/
		try {
			listMenu = partsService.getPartsMenu("-1","");
			getRequest().setAttribute("list", listMenu);
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "success";
	}

	/**
	 * 
	 * getPatrsMenu:(加载部件目录). TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	 * 
	 * @author: 唐青
	 * @dateTime: 2017-10-14 下午3:31:34 void
	 * @since JDK 1.7
	 */
	public void getPatrsMenu() {
		String squ = getRequest().getParameter("squ");
		JSONObject json = new JSONObject();
		try {
			List<Map<String, String>> listMenu = partsService.getPartsMenu(squ,"");
			json.accumulate("state", "success");
			json.accumulate("list", listMenu);
		} catch (Exception e) {
			json.accumulate("state", "wrong");
			json.accumulate("state", e.getMessage());
		}
		// System.out.println(json.toString());
		writeJsonBack(json.toString());
	}

	public void getChildMenu() {

		// JSONObject jsonObj = new JSONObject();
		String squ = getRequest().getParameter("squ");
		String pageStr = getRequest().getParameter("page");
		String rowsStr = getRequest().getParameter("rows");
		String key = getRequest().getParameter("searchKey");
		if (pageStr != null || !"".equals(pageStr)) {
			this.pageVo.setPageNumber(Integer.parseInt(pageStr));
		}
		if (rowsStr != null) {
			this.pageVo.setPageSize(Integer.parseInt(rowsStr));
		}

		try {
			this.pageVo = partsService.selectChildMenu(pageVo, squ,key);
			// jsonObj.accumulate("pageVo", pageVo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		JSONObject jsonObj = JSONObject.fromObject(pageVo);

		writeJsonBack(jsonObj.toString());
	}

	/**
	 * 
	 * editChildMenu:(修改). TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	 * 
	 * @author: 唐青
	 * @dateTime: 2017-10-16 下午7:05:09 void
	 * @since JDK 1.7
	 */
	public void editChildMenu() {
		//System.out.println(wzz.getSQU());
		try {
			partsService.updateMenu(wzz);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	public void addChildMenu() {
		try {
			partsService.addMenu(wzz);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void delChildMenu() {
		JSONObject json = new JSONObject();
		String squ = getRequest().getParameter("squ");
		int i=0;
		try {
			i = partsService.delChildMenu(squ);
			json.accumulate("status", i);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		writeJsonBack(json.toString());
	}

	public void dowloadPartsMB() {
		String filePath = ServletActionContext.getServletContext().getRealPath(
				File.separator + "download/word/BJMLMB.zip");
		String saveFileName = "BJMLMB.zip";
		// response.setContentType("application/octet-stream;charset=utf-8");
		getResponse().setContentType("application/zip");
		// response.setContentType("application/x-download");
		OutputStream outp = null;
		FileInputStream in = null;
		try {

			getResponse()
					.addHeader(
							"Content-Disposition",
							"attachment;filename=\""
									+ encodeFilename(getRequest(), saveFileName)
									+ "\"");// 名称两边的双引号不能省略 兼容火狐 文件名中的空格
			outp = getResponse().getOutputStream();
			in = new FileInputStream(filePath);
			byte[] b = new byte[1024];
			int i = 0;
			while ((i = in.read(b)) > 0) {
				outp.write(b, 0, i);
			}
			outp.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				in = null;
			}
			if (outp != null) {
				try {
					outp.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				outp = null;
			}
		}
	}

	/**
	 * 
	  * dowloadAZFSMB:(下载安装方式模板).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-9 下午4:14:08 void
	  * @since JDK 1.7
	 */
	public void dowloadAZFSMB() {
		String filePath = ServletActionContext.getServletContext().getRealPath(
				File.separator + "download/word/AZFSMB.zip");
		String saveFileName = "AZFSMB.zip";
		// response.setContentType("application/octet-stream;charset=utf-8");
		getResponse().setContentType("application/zip");
		// response.setContentType("application/x-download");
		OutputStream outp = null;
		FileInputStream in = null;
		try {

			getResponse()
					.addHeader(
							"Content-Disposition",
							"attachment;filename=\""
									+ encodeFilename(getRequest(), saveFileName)
									+ "\"");// 名称两边的双引号不能省略 兼容火狐 文件名中的空格
			outp = getResponse().getOutputStream();
			in = new FileInputStream(filePath);
			byte[] b = new byte[1024];
			int i = 0;
			while ((i = in.read(b)) > 0) {
				outp.write(b, 0, i);
			}
			outp.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				in = null;
			}
			if (outp != null) {
				try {
					outp.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				outp = null;
			}
		}
	}
	
	/**
	 * 
	  * dowloadGDLXMB:(下载管道类型模板).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-9 下午4:14:40 void
	  * @since JDK 1.7
	 */
	public void dowloadGDLXMB() {
		String filePath = ServletActionContext.getServletContext().getRealPath(
				File.separator + "download/word/GDLXMB.zip");
		String saveFileName = "GDLXMB.zip";
		// response.setContentType("application/octet-stream;charset=utf-8");
		getResponse().setContentType("application/zip");
		// response.setContentType("application/x-download");
		OutputStream outp = null;
		FileInputStream in = null;
		try {

			getResponse()
					.addHeader(
							"Content-Disposition",
							"attachment;filename=\""
									+ encodeFilename(getRequest(), saveFileName)
									+ "\"");// 名称两边的双引号不能省略 兼容火狐 文件名中的空格
			outp = getResponse().getOutputStream();
			in = new FileInputStream(filePath);
			byte[] b = new byte[1024];
			int i = 0;
			while ((i = in.read(b)) > 0) {
				outp.write(b, 0, i);
			}
			outp.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				in = null;
			}
			if (outp != null) {
				try {
					outp.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				outp = null;
			}
		}
	}
	private static String encodeFilename(HttpServletRequest request,
			String fileName) throws UnsupportedEncodingException {
		String agent = request.getHeader("USER-AGENT");

		try {
			// IE
			if (null != agent && -1 != agent.indexOf("MSIE")) {
				fileName = URLEncoder.encode(fileName, "UTF-8");
				// Firefox
			} else if (null != agent && -1 != agent.indexOf("Mozilla")) {
				fileName = new String(fileName.getBytes("UTF-8"), "ISO-8859-1");
			}
		} catch (UnsupportedEncodingException e) {
			try {
				fileName = new String(fileName.getBytes("UTF-8"), "iso-8859-1");
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		return fileName;
	}

	private String squ = null;

	public void addBatchParts() {
		//System.out.println(getRequest().getParameter("squ")); 
		
		// 此时的Workbook应该是从 客户端浏览器上传过来的 uploadFile了,其实跟读取本地磁盘的一个样
		try {
			POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(
					userUploadFile));
			HSSFWorkbook wb = new HSSFWorkbook(fs);
			// HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(new
			// File("C:\\Users\\Administrator\\Downloads\\201708081523.xls")));
			HSSFSheet hssfSheet = wb.getSheetAt(0);
			List<Wzzdb> list = new ArrayList<Wzzdb>();
			DecimalFormat df = new DecimalFormat("0");  
			 
			Wzzdb wz = null;
			if (hssfSheet != null) {
				// 遍历excel,从第一行开始 即 rowNum=0,逐个获取单元格的内容,然后进行格式处理,最后插入数据库
				for (int rowNum = 1; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
					HSSFRow hssfRow = hssfSheet.getRow(rowNum);
					// System.out.println(hssfRow.toString());
					if (hssfRow == null) {
						continue;
					}
					wz = new Wzzdb();
					wz.setLBMC(String.valueOf(hssfRow.getCell(0)));
					wz.setDMLB(String.valueOf(hssfRow.getCell(1)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					wz.setJD(String.valueOf(hssfRow.getCell(2)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					wz.setSSMC(String.valueOf(hssfRow.getCell(3)));
					wz.setPARENTSQU(squ);
					list.add(wz);

				}

			}
			partsService.addBatchParts(list);
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		// writeJsonBack(json.toString());
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 
	  * addBatchGdlx:(批量导入管道类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-9 下午4:19:44 void
	  * @since JDK 1.7
	 */
	public void addBatchGdlx() {
		UserDto user = (UserDto) getSession().getAttribute("user");
		//System.out.println(getRequest().getParameter("squ")); 
		
		// 此时的Workbook应该是从 客户端浏览器上传过来的 uploadFile了,其实跟读取本地磁盘的一个样
		try {
			POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(
					userUploadFile));
			HSSFWorkbook wb = new HSSFWorkbook(fs);
			// HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(new
			// File("C:\\Users\\Administrator\\Downloads\\201708081523.xls")));
			HSSFSheet hssfSheet = wb.getSheetAt(0);
			List<Gdlx> list = new ArrayList<Gdlx>();
			//DecimalFormat df = new DecimalFormat("0");  
			 
			Gdlx gdlx = null;
			if (hssfSheet != null) {
				// 遍历excel,从第一行开始 即 rowNum=0,逐个获取单元格的内容,然后进行格式处理,最后插入数据库
				for (int rowNum = 1; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
					HSSFRow hssfRow = hssfSheet.getRow(rowNum);
					// System.out.println(hssfRow.toString());
					if (hssfRow == null) {
						continue;
					}
					gdlx = new Gdlx();
					gdlx.setZH(String.valueOf(hssfRow.getCell(0)));
					gdlx.setXH(String.valueOf(hssfRow.getCell(1)));
					gdlx.setLBDM(String.valueOf(hssfRow.getCell(2)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					gdlx.setFL(String.valueOf(hssfRow.getCell(3)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					gdlx.setZH(String.valueOf(hssfRow.getCell(4)));
					gdlx.setXH(String.valueOf(hssfRow.getCell(5)));
					gdlx.setLRR(String.valueOf(user.getSqu())  );
					list.add(gdlx);

				}

			}
			partsService.addBatchGdlx(list);
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		// writeJsonBack(json.toString());
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 
	  * addBatchAzfs:(批量导入安装方式).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-9 下午4:33:44 void
	  * @since JDK 1.7
	 */
	public void addBatchAzfs() {
		//System.out.println(getRequest().getParameter("squ")); 
		
		// 此时的Workbook应该是从 客户端浏览器上传过来的 uploadFile了,其实跟读取本地磁盘的一个样
		try {
			POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(
					userUploadFile));
			HSSFWorkbook wb = new HSSFWorkbook(fs);
			// HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(new
			// File("C:\\Users\\Administrator\\Downloads\\201708081523.xls")));
			HSSFSheet hssfSheet = wb.getSheetAt(0);
			List<Gdlx> list = new ArrayList<Gdlx>();
			DecimalFormat df = new DecimalFormat("0");  
			 
			Gdlx gdlx = null;
			if (hssfSheet != null) {
				// 遍历excel,从第一行开始 即 rowNum=0,逐个获取单元格的内容,然后进行格式处理,最后插入数据库
				for (int rowNum = 1; rowNum <= hssfSheet.getLastRowNum(); rowNum++) {
					HSSFRow hssfRow = hssfSheet.getRow(rowNum);
					// System.out.println(hssfRow.toString());
					if (hssfRow == null) {
						continue;
					}
					gdlx = new Gdlx();
					gdlx.setMS(String.valueOf(hssfRow.getCell(0)));
					gdlx.setLBDM(String.valueOf(hssfRow.getCell(1)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					gdlx.setFL(String.valueOf(hssfRow.getCell(2)).substring(0,String.valueOf(hssfRow.getCell(1)).indexOf(".")));
					list.add(gdlx);

				}

			}
			partsService.addBatchAzfs(list);
		} catch (FileNotFoundException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		// writeJsonBack(json.toString());
		catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 
	  * addGdlx:(添加管道类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 上午11:14:44 void
	  * @since JDK 1.7
	 */
	public void addGdlx(){
		UserDto user = (UserDto) getSession().getAttribute("user");
		gdlx.setLRR(String.valueOf(user.getSqu()));
		try {
			partsService.addGdlx(gdlx);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	  * addAzlx:(添加安装类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 上午11:15:55 void
	  * @since JDK 1.7
	 */
	public void addAzlx(){
		try {
			partsService.addAzlx(gdlx);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	  * queryGdlx:(分页查询管道类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午2:38:31 void
	  * @since JDK 1.7
	 */
	public void queryGdlx(){
	
		String pageStr = getRequest().getParameter("page");
		String rowsStr = getRequest().getParameter("rows");
		String key = getRequest().getParameter("searchKey");
		if (pageStr != null || !"".equals(pageStr)) {
			this.pageVo.setPageNumber(Integer.parseInt(pageStr));
		}
		if (rowsStr != null) {
			this.pageVo.setPageSize(Integer.parseInt(rowsStr));
		}

		try {
			this.pageVo = partsService.selectGdlx(pageVo, key);
			// jsonObj.accumulate("pageVo", pageVo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		JSONObject jsonObj = JSONObject.fromObject(pageVo);

		writeJsonBack(jsonObj.toString());
	}
	
	/**
	 * 
	  * queryAzlx:(分页查询安装方式).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午2:39:07 void
	  * @since JDK 1.7
	 */
	public void queryAzlx(){
		String pageStr = getRequest().getParameter("page");
		String rowsStr = getRequest().getParameter("rows");
		String key = getRequest().getParameter("searchKey");
		if (pageStr != null || !"".equals(pageStr)) {
			this.pageVo.setPageNumber(Integer.parseInt(pageStr));
		}
		if (rowsStr != null) {
			this.pageVo.setPageSize(Integer.parseInt(rowsStr));
		}

		try {
			this.pageVo = partsService.selectAzlx(pageVo, key);
			// jsonObj.accumulate("pageVo", pageVo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		JSONObject jsonObj = JSONObject.fromObject(pageVo);

		writeJsonBack(jsonObj.toString());
	}
	
	/**
	 * 
	  * quertGdlxMenu:(获取管道类型左边菜单).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午3:13:32 void
	  * @since JDK 1.7
	 */
	public void queryGdlxMenu(){
		JSONObject json = new JSONObject();
		try {
			List<Gdlx> list = partsService.selectGdlxMenu();
			json.accumulate("gdlxmenu", list);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	//	System.out.println(json.toString());
		writeJsonBack(json.toString());
	}
	/**
	 * 
	  * queryAzlxMenu:(获取安装方式左边菜单).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午3:14:27 void
	  * @since JDK 1.7
	 */
	public void queryAzlxMenu(){
		JSONObject json = new JSONObject();
		try {
			List<Gdlx> list = partsService.selectAzlxMenu();
			json.accumulate("azlxmenu", list);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//System.out.println("==="+json.toString());
		writeJsonBack(json.toString());
	}
	
	/**
	 * 
	  * editGdlx:(修改管道类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午4:55:24 void
	  * @since JDK 1.7
	 */
	public void editGdlx(){
		try {
			partsService.updateGdlx(gdlx);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 
	  * editAzlx:(修改安装方式).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午4:55:47 void
	  * @since JDK 1.7
	 */
	public void editAzlx(){
		try {
			partsService.updateAzlx(gdlx);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	  * deleteGdlx:(删除管道类型).
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	  * @author: 唐青
	  * @dateTime: 2017-11-7 下午4:56:52 void
	  * @since JDK 1.7
	 */
	public void deleteGdlx(){
		try {
			partsService.deleteGdlx(squ);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	

	/**
	 * 
	 * getPatrsMenu:(加载部件目录). TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).
	 * 
	 * @author: 唐青
	 * @dateTime: 2017-10-14 下午3:31:34 void
	 * @since JDK 1.7
	 */
	/*public void getZjLxMenu() {
		String squ = getRequest().getParameter("squ");
		JSONObject json = new JSONObject();
		try {
			List<Map<String, String>> listMenu = partsService.getPartsMenu(squ,"ZJLX");			
			json.accumulate("state", "success");
			json.accumulate("list", listMenu);
		} catch (Exception e) {
			json.accumulate("state", "wrong");
			json.accumulate("state", e.getMessage());
		}
		 System.out.println(json.toString());
		writeJsonBack(json.toString());
	}
	
	public void getDzMenu() {
		String squ = getRequest().getParameter("squ");
		JSONObject json = new JSONObject();
		try {
			List<Map<String, String>> listMenu = partsService.getPartsMenu(squ,"DZYX");
			json.accumulate("state", "success");
			json.accumulate("list", listMenu);
		} catch (Exception e) {
			json.accumulate("state", "wrong");
			json.accumulate("state", e.getMessage());
		}
		// System.out.println(json.toString());
		writeJsonBack(json.toString());
	}
	
	public void getSsXtMenu() {
		String squ = getRequest().getParameter("squ");
		JSONObject json = new JSONObject();
		try {
			List<Map<String, String>> listMenu = partsService.getPartsMenu(squ,"SSXT");
			json.accumulate("state", "success");
			json.accumulate("list", listMenu);
		} catch (Exception e) {
			json.accumulate("state", "wrong");
			json.accumulate("state", e.getMessage());
		}
		// System.out.println(json.toString());
		writeJsonBack(json.toString());
	}*/
	
	public IPartsService getPartsService() {
		return partsService;
	}

	public void setPartsService(IPartsService partsService) {
		this.partsService = partsService;
	}

	public Wzzdb getWzz() {
		return wzz;
	}

	public void setWzz(Wzzdb wzz) {
		this.wzz = wzz;
	}

	public File getUserUploadFile() {
		return userUploadFile;
	}

	public void setUserUploadFile(File userUploadFile) {
		this.userUploadFile = userUploadFile;
	}

	public String getSqu() {
		return squ;
	}

	public void setSqu(String squ) {
		this.squ = squ;
	}

	public Gdlx getGdlx() {
		return gdlx;
	}

	public void setGdlx(Gdlx gdlx) {
		this.gdlx = gdlx;
	}

}
