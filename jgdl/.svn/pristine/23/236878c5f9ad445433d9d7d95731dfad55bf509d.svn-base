package monitor.goodsHouse.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import monitor.common.dao.BaseDAO;
import monitor.goodsHouse.bean.entity.Cpmxb;
import monitor.goodsHouse.bean.entity.Wzzdb;
import monitor.goodsHouse.bean.vo.CpmxbVo;
import monitor.goodsHouse.dao.IStentsDao;
import monitor.user.bean.vo.PageInfoVo;

/**
 *@ClassName
 *@dataTime 2017-10-14-下午2:41:06
 *@version
 *@author:唐青
 *@since
 */
public class StentsDaoImpl extends BaseDAO implements IStentsDao{

	private void closeCon(Connection conn, PreparedStatement pstmt, ResultSet rs)
			throws SQLException {
		// 关闭连接
		if (rs != null) {
			rs.close();
		}
		if (pstmt != null) {
			pstmt.close();
		}
		if (conn != null) {
			conn.close();
		}
	}
	@Override
	public List<Map<String, String>> getStentsMenu(String squ)
			throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		// 获取连接
		conn = datasource.getConnection();
		StringBuffer sql = new StringBuffer();
		List<Map<String, String>> list = new ArrayList<Map<String, String>>();

		// 菜单查询条件判断
		if(squ ==null|| squ.equals("")){
			squ = "-1";
		}
		sql.append("SELECT * FROM PROJECT_WZZDB T WHERE PARENTSQU = '"+squ+"'  ORDER BY T.DMLB ");
		pstmt = conn.prepareStatement(sql.toString());
		rs = pstmt.executeQuery();
		Map<String, String> map = null ;
		while (rs.next()) {
			map = new HashMap<String, String>();
			map.put("SQU", rs.getString("SQU"));
			map.put("DMLB", rs.getString("DMLB"));
			map.put("LBMC", rs.getString("LBMC"));
			map.put("PARENTSQU", rs.getString("PARENTSQU"));
			map.put("JD", rs.getString("JD"));
			map.put("ZHDM", rs.getString("ZHDM"));		
			map.put("SSMC", rs.getString("SSMC"));		
			list.add(map);
		}		
		this.closeCon(conn, pstmt, rs);
		return list;
	}
	@Override
	public PageInfoVo selectChildCp(PageInfoVo page, String squ,String key)
			throws SQLException {
		List<CpmxbVo> list = new ArrayList<CpmxbVo>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuffer sql = new StringBuffer();
		String query = "";
		/*if(key.equals("1")){
			query = " AND ()"
		}*/
		sql.append("SELECT COUNT(*) FROM (");
		sql.append(" SELECT X.*,D1.LBMC XHMC,D1.DMLB XHLB,D2.LBMC XLMC, ");
		sql.append(" D2.DMLB XLLB,D3.LBMC ZMMC ,D3.DMLB ZMLB,D4.LBMC TZMC, ");
		sql.append(" D4.DMLB TZLB FROM PROJCRT_CPMXB X,PROJECT_WZZDB D1, ");
		sql.append(" PROJECT_WZZDB D2,PROJECT_WZZDB D3,PROJECT_WZZDB D4 ");
		sql.append(" WHERE 1=1 AND X.CPXH=D1.SQU  AND X.CPXL=D2.SQU  ");
		sql.append(" AND X.CPZM=D3.SQU AND X.CPTZ=D4.SQU AND  ");
		sql.append(" ( X.CPXH='"+squ+"' OR X.CPXL='"+squ+"' OR X.CPZM='"+squ+"' OR X.CPTZ='"+squ+"'))");
		conn = datasource.getConnection();
		pstmt = conn.prepareStatement(sql.toString());
		rs = pstmt.executeQuery();

		if (rs.next()) {
			page.setTotal(rs.getInt(1));
		}

		int startIndex = (page.getPageNumber() - 1) * page.getPageSize() + 1;
		StringBuffer sbsql = new StringBuffer();
	
		sbsql.append(" SELECT * FROM ( SELECT A.* ,ROWNUM RN FROM ( ");
		sbsql.append(" SELECT X.*,D1.LBMC XHMC,D1.DMLB XHLB,D2.LBMC XLMC, ");
		sbsql.append(" D2.DMLB XLLB,D3.LBMC ZMMC ,D3.DMLB ZMLB,D4.LBMC TZMC, ");
		sbsql.append(" D4.DMLB TZLB FROM PROJCRT_CPMXB X,PROJECT_WZZDB D1, ");
		sbsql.append(" PROJECT_WZZDB D2,PROJECT_WZZDB D3,PROJECT_WZZDB D4 ");
		sbsql.append(" WHERE 1=1 AND X.CPXH=D1.SQU  AND X.CPXL=D2.SQU  ");
		sbsql.append(" AND X.CPZM=D3.SQU AND X.CPTZ=D4.SQU AND  ");
		sbsql.append(" ( X.CPXH='"+squ+"' OR X.CPXL='"+squ+"' OR X.CPZM='"+squ+"' OR X.CPTZ='"+squ+"'))A)  ");
		sbsql.append("WHERE RN<"+(startIndex + page.getPageSize())+" AND RN>="+startIndex);
		System.out.println(sbsql.toString());
		pstmt = conn.prepareStatement(sbsql.toString());
		rs = pstmt.executeQuery();
		CpmxbVo cp = null;
		while(rs.next()){
			cp = new CpmxbVo();
			cp.setCpSQU(rs.getString("SQU")); 
			cp.setCPBM(rs.getString("CPBM"));
			cp.setCYMC(rs.getString("CYMC"));
			cp.setBJXH(rs.getString("BJXH"));
			cp.setJLDW(rs.getString("JLDW"));
			cp.setCBDJ(rs.getString("CBDJ"));
			cp.setCpPARENTSQU(rs.getString("PARENTSQU"));
			cp.setEDHL(rs.getString("EDHL"));
			cp.setCPXH(rs.getString("CPXH"));
			cp.setCPXL(rs.getString("CPXL"));
			cp.setCPZM(rs.getString("CPZM"));
			cp.setCPTZ(rs.getString("CPTZ"));
			cp.setXHLB(rs.getString("XHLB"));
			cp.setXHMC(rs.getString("XHMC"));
			cp.setXLLB(rs.getString("XLLB"));
			cp.setXLMC(rs.getString("XLMC"));
			cp.setZMLB(rs.getString("ZMLB"));
			cp.setZMMC(rs.getString("ZMMC"));
			cp.setTZLB(rs.getString("TZLB"));
			cp.setTZMC(rs.getString("TZMC"));
			cp.setZP(rs.getString("ZP"));
			list.add(cp);
		}
		page.setRows(list);
		this.closeCon(conn, pstmt, rs);
	return page;
	}
	@Override
	public int addCp(Cpmxb cpmxb) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int i = 0;
		String sql = "INSERT INTO  PROJCRT_CPMXB (CPBM,CYMC,BJXH,JLDW,PARENTSQU,EDHL,CPXH,CPXL,CPZM,CPTZ,ZP,CBDJ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
		try {
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, cpmxb.getCPBM());
			pstmt.setString(2,cpmxb.getCYMC());
			pstmt.setString(3,cpmxb.getBJXH());
			pstmt.setString(4, cpmxb.getJLDW());
			pstmt.setString(5, null);
			pstmt.setString(6, cpmxb.getEDHL());
			pstmt.setString(7,cpmxb.getCPXH());
			pstmt.setString(8,cpmxb.getCPXL());
			pstmt.setString(9, cpmxb.getCPZM());
			pstmt.setString(10, cpmxb.getCPTZ());
			pstmt.setString(11, cpmxb.getZP());
			pstmt.setString(12, cpmxb.getCBDJ());
			i = pstmt.executeUpdate();
		} finally{
			this.closeCon(conn, pstmt, null);
		}
		return i;
	}
	@Override
	public int editCp(Cpmxb cpmxb) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		//System.out.println();
		String sql = "";
		int i=0;
	
		try {
		if(cpmxb.getZP().equals("1")){
			 sql = "UPDATE PROJCRT_CPMXB SET CPBM=?,CYMC=?,BJXH=?,JLDW=?,EDHL=?,CBDJ=? WHERE SQU=?";
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, cpmxb.getCPBM());
			pstmt.setString(2,cpmxb.getCYMC());
			pstmt.setString(3,cpmxb.getBJXH());
			pstmt.setString(4, cpmxb.getJLDW());
			pstmt.setString(5, cpmxb.getEDHL());
			pstmt.setString(6, cpmxb.getCBDJ());
			pstmt.setString(7, cpmxb.getSQU());
			
			i=pstmt.executeUpdate();
		}else{
			 sql = "UPDATE PROJCRT_CPMXB SET CPBM=?,CYMC=?,BJXH=?,JLDW=?,EDHL=?,CBDJ=?,ZP=?WHERE SQU=?";
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, cpmxb.getCPBM());
			pstmt.setString(2,cpmxb.getCYMC());
			pstmt.setString(3,cpmxb.getBJXH());
			pstmt.setString(4, cpmxb.getJLDW());
			pstmt.setString(5, cpmxb.getEDHL());
			pstmt.setString(6, cpmxb.getCBDJ());
			pstmt.setString(7, cpmxb.getZP());
			pstmt.setString(8, cpmxb.getSQU());
		
			i=pstmt.executeUpdate();
		}
	
		} finally{
			this.closeCon(conn, pstmt, null);
		}
		return i;
	}
	@Override
	public void deleteCp(String squ) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		String sql = "DELETE PROJCRT_CPMXB  WHERE SQU=?";
		//System.out.println(sql);
		try {
			conn = datasource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, squ);
			
			pstmt.executeUpdate();
		} finally{
			this.closeCon(conn, pstmt, null);
		}
	}
	@SuppressWarnings("null")
	@Override
	public List<Cpmxb> selectStentsBySqu(String squ) throws SQLException {
		List<Cpmxb> list = new ArrayList<Cpmxb>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		conn = datasource.getConnection();
		StringBuffer sbsql = new StringBuffer();
	
		sbsql.append("  SELECT SQU,CPBM,CYMC,BJXH,JLDW,CBDJ, EDHL FROM PROJCRT_CPMXB  ");
		sbsql.append("  WHERE 1=1 AND SQU='"+squ+"' ");
		
		System.out.println(sbsql.toString());
		pstmt = conn.prepareStatement(sbsql.toString());
		rs = pstmt.executeQuery();
		Cpmxb cp = null;
		while(rs.next()){
			cp = new Cpmxb();
			cp.setSQU(rs.getString("SQU"));
			cp.setCPBM(rs.getString("CPBM"));
			cp.setCYMC(rs.getString("CYMC"));
			cp.setBJXH(rs.getString("BJXH"));
			cp.setJLDW(rs.getString("JLDW"));
			cp.setCBDJ(rs.getString("CBDJ"));
			cp.setEDHL(rs.getString("EDHL"));
			list.add(cp);
		}
		//page.setRows(list);
		this.closeCon(conn, pstmt, rs);
	return list;
		
	}
	@Override
	public  void addBatchStents(List<Cpmxb> list) throws SQLException{
		Connection conn = null;
		PreparedStatement pstmt = null;	
		String sql = "INSERT INTO  PROJCRT_CPMXB (CPBM,CYMC,BJXH,JLDW,PARENTSQU,EDHL,CPXH,CPXL,CPZM,CPTZ,ZP,CBDJ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
		try {
			conn = datasource.getConnection();
			 // 关闭事务自动提交  
			conn.setAutoCommit(false); 
			pstmt = conn.prepareStatement(sql);
			for(int i=0;i<list.size();i++){
				pstmt.setString(1, list.get(i).getCPBM());
				pstmt.setString(2,list.get(i).getCYMC());
				pstmt.setString(3,list.get(i).getBJXH());
				pstmt.setString(4, list.get(i).getJLDW());
				pstmt.setString(5, null);
				pstmt.setString(6, list.get(i).getEDHL());
				pstmt.setString(7,list.get(i).getCPXH());
				pstmt.setString(8,list.get(i).getCPXL());
				pstmt.setString(9, list.get(i).getCPZM());
				pstmt.setString(10, list.get(i).getCPTZ());
				pstmt.setString(11, list.get(i).getZP());
				pstmt.setString(12, list.get(i).getCBDJ());
				pstmt.addBatch();  
			}
			
			 pstmt.executeBatch();
			 // 语句执行完毕，提交本事务  
	         conn.commit();  
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
