package monitor.projectConfig.service.impl;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;
import monitor.common.service.BaseServicce;
import monitor.projectConfig.bean.entity.T_Project;
import monitor.projectConfig.dao.impl.ProjectConfigDaoImpl;
import monitor.projectConfig.service.IProjectConfigService;
import monitor.user.bean.vo.PageInfoVo;

/**
 * @ClassName:ProjectConfigImpl
 * @dateTime: 2017-10-14 下午3:22:52
 * @Description: TODO
 * @version 
 * @author: 黄月
 * @since JDK 1.7
 * History：
 * Editor     version      Time               Operation
 */
public class ProjectConfigServiceImpl extends BaseServicce implements IProjectConfigService {
	
	private Connection conn = null;
	
	@Resource(name="projectDao")
	private ProjectConfigDaoImpl projectDao;
	
	/**
	  * selectProjectPageInfo:分页查询项目列表
	  * @author 黄月
	  * @date  2017-10-14 下午3:55:54
	  * @param pageVo
	  * @return 
	 * @throws SQLException 
	*/
	@Override
	public PageInfoVo selectProjectPageInfo(PageInfoVo pageVo, String searchWord) throws SQLException {
		
		pageVo.setStartIndex((pageVo.getPageNumber() - 1) * pageVo.getPageSize() + 1);
		pageVo.setEndIndex(pageVo.getStartIndex() + pageVo.getPageSize());
		
		try {
			conn = datasource.getConnection();
			if ("".equals(searchWord)) {
				//项目总数
				pageVo.setTotal(projectDao.selectCountProject(conn));
				//项目列表
				pageVo.setRows(projectDao.selectProjectPageInfo(pageVo, conn));
			} else {
				searchWord = searchWord.trim();
				//项目总数
				pageVo.setTotal(projectDao.selectCountProjectBySearch(conn, searchWord));
				//项目列表
				pageVo.setRows(projectDao.selectProjectPageInfoBySearch(pageVo, conn, searchWord));
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
		return pageVo;
	}

	/**
	  * selectProjectBySqu:查询单个项目
	  * @author 黄月
	  * @date  2017-10-14 下午3:55:54
	  * @param squ
	  * @return 
	 * @throws SQLException 
	*/
	@Override
	public T_Project selectProjectBySqu(String squ) throws SQLException {
		T_Project pro = new T_Project();
		try {
			conn = datasource.getConnection();
			pro = projectDao.selectProjectBySqu(squ, conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
		return pro;
	}

	/**
	  * insertProject:新增项目
	  * @author 黄月
	  * @date  2017-10-14 下午3:55:54
	  * @param project 
	 * @throws SQLException 
	*/
	@Override
	public void insertProject(T_Project project) throws SQLException {
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			projectDao.insertProject(project, conn);
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
	}

	/**
	  * updateProjectBySqu:修改项目基本信息
	  * @author 黄月
	  * @date  2017-10-14 下午3:55:54
	  * @param squ 
	 * @throws SQLException 
	*/
	@Override
	public void updateProjectBySqu(T_Project project) throws SQLException {
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			projectDao.updateProjectBySqu(project, conn);
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
	}

	/**
	  * deleteProjectBySqu:接口实现
	  * @author 黄月
	  * @date  2017-10-14 下午3:55:54
	  * @param squ 
	 * @throws SQLException 
	*/
	@Override
	public void deleteProjectBySqu(String squ) throws SQLException {
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			projectDao.deleteProjectBySqu(squ, conn);
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
	}
	
	
	public ProjectConfigDaoImpl getProjectDao() {
		return projectDao;
	}

	/**
	  * closed:(关闭数据库连接).<br/>
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).<br/>
	  * @author: 黄月
	  * @dateTime: 2017-10-14 下午3:29:43
	  * @param rs
	  * @param ps
	  * @param conn void
	  * @since JDK 1.7
	*/
	private void closed(Connection conn){
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	  * selectProjectAll:接口实现
	  * @author 黄月
	  * @date  2017-10-23 下午6:39:42
	  * @return 
	 * @throws SQLException 
	*/
	@Override
	public List<T_Project> selectProjectAll() throws SQLException {
		List<T_Project> list = null;
		try {
			conn = datasource.getConnection();
			list = projectDao.selectProjectAll(conn);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
		return list;
	}

	/**
	  * selectHolderOfProjectPageInfo:接口实现
	  * @author 黄月
	  * @date  2017-10-23 下午8:05:13
	  * @param pageVo
	  * @return
	  * @throws SQLException 
	*/
	@Override
	public PageInfoVo selectHolderOfProjectPageInfo(PageInfoVo pageVo, String squ)
			throws SQLException {
		try {
			conn = datasource.getConnection();
			//项目总数
			pageVo.setTotal(projectDao.selectCountHolderOfProject(conn, squ));
			
			pageVo.setStartIndex((pageVo.getPageNumber() - 1) * pageVo.getPageSize() + 1);
			pageVo.setEndIndex(pageVo.getStartIndex() + pageVo.getPageSize());
			//项目列表
			pageVo.setRows(projectDao.selectHolderOfProjectPageInfo(pageVo, squ, conn));
		} catch (SQLException e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
		return pageVo;
	}

	/**
	  * getHolderList:接口实现
	  * @author 黄月
	  * @date  2017-10-24 下午7:18:58
	  * @param pageVo
	  * @return
	  * @throws SQLException 
	*/
	@Override
	public PageInfoVo getHolderList(PageInfoVo pageVo) throws SQLException {
		try {
			conn = datasource.getConnection();
			//项目总数
			pageVo.setTotal(projectDao.selectCountHolder(conn));
			
			pageVo.setStartIndex((pageVo.getPageNumber() - 1) * pageVo.getPageSize() + 1);
			pageVo.setEndIndex(pageVo.getStartIndex() + pageVo.getPageSize());
			//项目列表
			pageVo.setRows(projectDao.selectHolderPageInfo(pageVo, conn));
		} catch (SQLException e) {
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
		return pageVo;
	}

	/**
	  * addHolderToProject:新增支架
	  * @author 黄月
	  * @date  2017-10-24 下午9:03:20
	  * @param holderSqu
	  * @param projectSqu 
	 * @throws SQLException 
	*/
	@Override
	public void addHolderToProject(String holderSqu, String projectSqu) throws SQLException {
		//int num = 0;
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			/*//查询项目是否已存在支架，并返回数量
			num = projectDao.selectHavingHolderOfProject(conn, holderSqu, projectSqu);
			if (num == 0) {*/
				//不存在则添加支架，默认为1
				projectDao.insertHolderToProject(conn, holderSqu, projectSqu);
			//}
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
			throw new SQLException(e.getMessage());
		} finally {
			closed(conn);
		}
	}
	
	/**
	  * addHolderToProject:(修改项目支架数量).<br/>
	  * TODO(这里描述方法适用条件/执行流程/使用方法/注意事项).<br/>
	  * @author: 黄月
	  * @dateTime: 2017-11-20 上午11:25:31
	  * @param num void
	 * @throws SQLException 
	  * @since JDK 1.7
	*/
	@Override
	public void updateHolderNumOfProject(Integer num, String holderSqu, String projectSqu) throws SQLException{
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			projectDao.updateHolderNumOfProject(conn, num, holderSqu, projectSqu);
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			throw new SQLException();
		} finally {
			closed(conn);
		}
	}

	/**
	  * deleteHolderOfProjectBySqu:根据id删除项目支架
	  * @author 黄月
	  * @date  2017-11-20 上午10:57:21
	  * @param squ
	  * @param conn 
	 * @throws SQLException 
	*/
	@Override
	public void deleteHolderOfProjectBySqu(String squ) throws SQLException {
		try {
			conn = datasource.getConnection();
			conn.setAutoCommit(false);
			projectDao.deleteHolderOfProjectBySqu(squ, conn);
			conn.commit();
		} catch (SQLException e) {
			try {
				conn.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			throw new SQLException();
		} finally {
			closed(conn);
		}
	}

}
